#Вариант 6. Вычислить сумму знакопеременного ряда |х(n-1)|/(n-1)!, где х-матрица ранга к (к и матрица задаются случайным образом), 
# n - номер слагаемого. Сумма считается вычисленной, если точность вычислений будет не меньше t знаков после запятой. 
# У алгоритма д.б. линейная сложность.. Знак первого слагаемого  -.

import copy
import random
import numpy as np
from decimal import Decimal

def gen_matrix():#функция, которая генерирует случайную матрицу
    k = random.randint(2, 5) # Генерируем случайную матрицу заданного ранга k
    random_x = np.random.randint(-1, 1, (k, k))
    if abs(np.linalg.det(random_x)) == 0:# Проверяем, чтобы определитель матрицы был ненулевым
        return gen_matrix()
    else:
        return random_x

def sum_series(current_x, Orig_x, t):#функция для подсчета суммы ряда |х^(n-1)|/(n-1)!
    n = 1
    factorial = 1
    res = 0

    while True:
        det = np.linalg.det(current_x) # Вычисляем определитель матрицы x
        curr_term = Decimal(det / factorial) # Текущее слагаемое ряда: |x^(n-1)| / (n-1)!

        if abs(curr_term) < 1 / (10 ** t): # Проверка условия завершения цикла по точности
            break

        res += curr_term # Прибавляем текущее слагаемое к результату
        n += 1 # Обновляем переменные для следующей итерации
        factorial *= n # Используем n для факториала, так как мы делим на факториал n-1

        current_x = np.dot(current_x, Orig_x)  # Возводим матрицу в степень (n-1) для следующего слагаемого

    return res

try:
    # Вводим пользовательскую точность
    t = int(input("Введите количество знаков после запятой: "))
    while t < 1:
        t = int(input("Введите число t, большее или равное 1:\n"))
    print()
    # Генерируем матрицу
    Orig_x = gen_matrix()
    current_x = copy.copy(Orig_x)# Копируем изначальную матрицу в текущую матрицу x

    print("Матрица :") #выводим матрицу
    print(Orig_x)

    result = sum_series(current_x, Orig_x, t)  # Вычисляем сумму ряда
   
    # Выводим результат с заданной точностью
    print(f"Сумма ряда |х^(n-1)|/(n-1)! с точностью {t} знаков после запятой: {result:.{t}f}")
except ValueError:
    print("Введенный символ не является числом. Перезапустите программу и введите число.")
    exit()

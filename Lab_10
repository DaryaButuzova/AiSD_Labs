#Программа для регистрации/входа и игры в крестики-нолики
import tkinter as tk
import random
from tkinter import messagebox
from tkinter import *
from tkinter.messagebox import showinfo, showerror, askyesno
import os


def check_file_exist():
    if not os.path.isfile("Reg.txt"):
        choice = askyesno(
            "Ошибка!", " Отсутствует 'Reg.txt' файл. Хотите создать его?")
        if choice:
            with open("Reg.txt", "w"):
                pass
        else:
            exit()
    return True


def check_login():
    if check_file_exist():
        with open("Reg.txt", "r") as file:
            lines = file.readlines()
            login_input = login.get()
            for line in lines:
                if login_input in line:
                    return True
        return False


def check_users():
    if check_file_exist():
        with open("Reg.txt", "r") as file:
            lines = file.readlines()
            login_input = login.get()
            password_input = password.get()
            for line in lines:
                # Разбиваем строку на логин и пароль
                parts = line.strip().split(':')
                if len(parts) == 2:  # Проверяем, что есть и логин, и пароль
                    stored_login, stored_password = parts
                    if login_input == stored_login and password_input == stored_password:
                        return True
        return False


def registration_user():
    if not login.get() or not password.get():
        showerror("Ошибка", "Поля 'Логин' и 'Пароль' должны быть заполнены.")
    elif check_login():
        showerror("Ошибка", "Учетная запись с таким логином уже существует.")
    else:
        with open("Reg.txt", "a") as file:
            file.write(f"{login.get()}:{password.get()}\n")
        showinfo("Успех", "Регистрация успешно завершена.\n Вы успешно вошли!")
        root.destroy()


def enter_users():
    if check_users():
        showinfo("Успех!", "Вы вошли в свой аккаунт ")
        root.destroy()
    else:
        showerror("Ошибка", "Неверный логин или пароль.")


# Создание графического интерфейса
root = Tk()
w, h = root.winfo_width(), root.winfo_height()
root.geometry(
    f"+{(root.winfo_screenwidth()-w)//2}+{(root.winfo_screenheight()-h)//2}")
root.title("Регистрация/Вход")

frame = Frame(root)
frame.grid(row=0, column=0, padx=10, pady=10)

Label(frame, text="Логин: ").grid(row=0, column=0)
Label(frame, text="Пароль: ").grid(row=1, column=0)

login = Entry(frame)
password = Entry(frame, show="*")

login.grid(row=0, column=1)
password.grid(row=1, column=1)

register_button = Button(frame, text="Регистрация", command=registration_user)
register_button.grid(row=2, columnspan=2)
enter_button = Button(frame, text="Вход", command=enter_users)
enter_button.grid(row=3, columnspan=3)
root.mainloop()

# Инициализируем переменную для текущего хода (крестик или нолик)
human_player = "X"
ai_player = "O"

# Создаем функцию, которая будет вызвана при нажатии на кнопку


def on_button_click(row, col):
    global human_player

    # Проверяем, что клетка пуста, прежде чем сделать ход
    if buttons[row][col]["text"] == "":
        buttons[row][col]["text"] = human_player

        # Проверяем, выиграл ли человек
        if check_winner(human_player):
            messagebox.showinfo("Победа", "Вы победили!")
            root.quit()  # Завершаем игру
        else:
            # Проверяем на ничью
            if check_draw():
                messagebox.showinfo("Ничья", "Ничья!")
                root.quit()  # Завершаем игру
            else:
                # Переключаем ход на ИИ
                make_ai_move()

# Функция для создания хода ИИ


def make_ai_move():
    global ai_player

    # Ищем наилучший ход для ИИ используя алгоритм Минимакс
    best_score = -float("inf")
    best_move = None

    for i in range(3):
        for j in range(3):
            if buttons[i][j]["text"] == "":
                buttons[i][j]["text"] = ai_player
                score = minimax(buttons, 0, False)
                buttons[i][j]["text"] = ""

                if score > best_score:
                    best_score = score
                    best_move = (i, j)

    if best_move:
        i, j = best_move
        buttons[i][j]["text"] = ai_player

        # Проверяем, выиграл ли ИИ
        if check_winner(ai_player):
            messagebox.showinfo("Победа", "Компьютер победил!")
            root.quit()  # Завершаем игру
        # Проверяем на ничью
        elif check_draw():
            messagebox.showinfo("Ничья", "Ничья!")
            root.quit()  # Завершаем игру

# Алгоритм Минимакс для определения наилучшего хода для ИИ


def minimax(board, depth, is_maximizing):
    if check_winner(ai_player):
        return 1
    elif check_winner(human_player):
        return -1
    elif check_draw():
        return 0

    if is_maximizing:
        best_score = -float("inf")
        for i in range(3):
            for j in range(3):
                if board[i][j]["text"] == "":
                    board[i][j]["text"] = ai_player
                    score = minimax(board, depth + 1, False)
                    board[i][j]["text"] = ""
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = float("inf")
        for i in range(3):
            for j in range(3):
                if board[i][j]["text"] == "":
                    board[i][j]["text"] = human_player
                    score = minimax(board, depth + 1, True)
                    board[i][j]["text"] = ""
                    best_score = min(score, best_score)
        return best_score

# Функция для проверки выигрышных комбинаций


def check_winner(player):
    for i in range(3):
        if buttons[i][0]["text"] == buttons[i][1]["text"] == buttons[i][2]["text"] == player:
            return True
        if buttons[0][i]["text"] == buttons[1][i]["text"] == buttons[2][i]["text"] == player:
            return True
    if buttons[0][0]["text"] == buttons[1][1]["text"] == buttons[2][2]["text"] == player:
        return True
    if buttons[0][2]["text"] == buttons[1][1]["text"] == buttons[2][0]["text"] == player:
        return True
    return False

# Проверка на ничью


def check_draw():
    for i in range(3):
        for j in range(3):
            if buttons[i][j]["text"] == "":
                return False
    return True


# Создание графического дизайна
root = Tk()
w, h = root.winfo_width(), root.winfo_height()
root.geometry(
    f"+{(root.winfo_screenwidth()-w)//2}+{(root.winfo_screenheight()-h)//2}")
root.title("Крестики-нолики")

# Создаем кнопки для игрового поля
buttons = []
for i in range(3):
    row_buttons = []
    for j in range(3):
        button = Button(root, text="", width=10, height=2,
                        command=lambda i=i, j=j: on_button_click(i, j))
        button.grid(row=i, column=j)
        row_buttons.append(button)
    buttons.append(row_buttons)

root.mainloop()

# С клавиатуры вводится два числа K и N. Квадратная матрица А(N,N), состоящая из 4-х равных по размерам подматриц, B,C,D,E
# заполняется случайным образом целыми числами в интервале [-10,10]. Для отладки использовать не случайное заполнение, а целенаправленное.
# Вид матрицы А:
#  Е	 В
#
#  D	 С
# Формируется матрица F следующим образом: скопировать в нее А и если А симметрична относительно побочной диагонали,
# то поменять местами симметрично В и  D, иначе D и Е поменять местами несимметрично. При этом матрица А не меняется.
# После чего если определитель матрицы А больше суммы диагональных элементов матрицы F, то вычисляется выражение: A-1*AT – K * F-1,
# иначе вычисляется выражение (AТ +G-FТ)*K, где G-нижняя треугольная матрица, полученная из А. Выводятся по мере формирования А, F
# и все матричные операции последовательно.
import random
import numpy as np
from matplotlib import pyplot as plt
try:
    print("Введите число K, являющееся коэффициентом при умножении: ")
    k = int(input())
    print("Введите число число N, большее 3, являющееся порядком квадратной матрицы: ")
    n = int(input())
    print()
    while n <= 3:        # ошибка в случае введения слишком малого порядка матрицы
        n = int(input(
            "Вы ввели число, неподходящее по условию, введите число N, большее или равное 3:\n"))

    # создаем матрицу А размером nxn, заполненную случайными числами
    A = np.random.randint(-10.0, 10.0, (n, n))
    # print(type(A))
    # A = np.array([[6, 8, 7, 6, 5, 1], [5, 7, 5, 4, 1, 5], [4, 6, 3, 1, 4, 6], [3, 3, 1, 3, 5, 7], [
    #   2, 1, 3, 6, 7, 8], [1, 2, 3, 4, 5, 6]], dtype=np.ndarray)  # задание матрицы для тестирования

    print("Матрица А изначальная:\n", A)

# Создание подматриц Матриц А
    submat_len = n//2  # длина подматрицы
    sub_mat_E = np.array(A[:submat_len, :submat_len])
    sub_mat_B = np.array(A[:submat_len, submat_len+n % 2:n])
    sub_mat_D = np.array(A[submat_len+n % 2:n, :submat_len])
    print("Подматрица E \n", sub_mat_E)
    print("Подматрица B \n", sub_mat_B)
    print("Подматрица D \n", sub_mat_D)

# Создание матрицы F = A
    F = A.copy()
    print("Матрица F = A \n", F)
# Резервная копия А для дальнейших операций
    F_res = A.copy()
# Условие на симметричность матрицы А
    FlagSymm = False
    for i in range(n):
        for j in range(n):
            if A[i][j] != A[n-j-1][n-i-1]:
                FlagSymm = False
            else:
                FlagSymm = True
    # print(FlagSymm)

    if FlagSymm == True:
        print('Матрица А симметрична относительно побочной диагонали -> меняем в матрице F B и D симметрично')
        F[:submat_len, submat_len+n % 2:n] = sub_mat_D[:submat_len, ::-1]
        F[submat_len+n % 2:n, :submat_len] = sub_mat_B[:submat_len, ::-1]
        print("Подматрица B \n", sub_mat_B)
        print("Подматрица D \n", sub_mat_D)
    else:
        print('Матрица А несимметрична -> меняем в матрице F подматрицы Е и D местами несимметрично')
        F[:submat_len, :submat_len] = sub_mat_D
        F[submat_len+n % 2:n, :submat_len] = sub_mat_E
        print("Подматрица E \n", sub_mat_E)
        print("Подматрица D \n", sub_mat_D)
    print('Измененная матрица F:\n', F)
# Вычисление выражения
    try:
        if np.linalg.det(A) > sum(np.diagonal(F)):
            print("\nОпределитель матрицы А больше суммы диагональных элементов матрицы F\nРезультат выражения A^(-1)*AT – K * F^(-1) :\n",
                  np.linalg.inv(A)*A.transpose() - k*np.linalg.inv(F))
        else:
            G = np.tri(n)*A

            print("\nОпределитель матрицы А меньше суммы диагональных элементов матрицы F\nРезультат выражения (AТ + G - FТ) * K:\n",
                  (A.transpose()+G-F.transpose())*k)
    except np.linalg.LinAlgError:
        print("Определитель равен 0, поэтому обратную матрицу найти невозможно.")
    print("\nМатрица, которая используется при построение графиков:\n", F)

    # Использование библиотеки matplotlib
    av = [np.mean(abs(F[i, ::])) for i in range(n)]
    # сумма средних значений строк (используется при создании третьего графика)
    av = int(sum(av))
    fig, axs = plt.subplots(2, 2, figsize=(11, 8))
    x = list(range(1, n+1))
    for j in range(n):
        y = list(F[j, ::])
        axs[0, 1].bar(x, y, 0.4, label=f"{j+1} строка.")  # гистограмма
        axs[0, 1].set(title="График с функцией bar:",
                      xlabel='Номер элемента в строке', ylabel='Значение элемента')
        # обычный график
        axs[0, 0].plot(x, y, ',-', label=f"{j+1} строка.")
        axs[0, 0].set(title="График функций plot:",
                      xlabel='Номер элемента в строке', ylabel='Значение элемента')
        axs[0, 0].grid()
        if n <= 10:
            axs[0, 1].legend(loc='lower right')
            axs[0, 1].legend(loc='lower right')
    # отношение средних значений от каждой строки
    explode = [0]*(n-1)
    explode.append(0.1)
    sizes = [round(np.mean(abs(F[i, ::])) * 100/av, 1) for i in range(n)]
    axs[1, 0].set_title("График с ипользованием функции pie:")
    axs[1, 0].pie(sizes, labels=list(range(1, n+1)),
                  explode=explode, autopct='%1.1f%%', shadow=True)
    plt.suptitle("библиотекa matplotlib")
    plt.tight_layout()
    plt.show()
except ValueError:
    print("\nВведенный символ не является числом. Перезапустите программу и введите число.")
